use std::str::FromStr;
use super::ast;

grammar;

match {
    r"\s+" => { },
    r"//[^\n\r]*[\n\r]*" => { },
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },
    "ld",
    "texmode_unified",
    "texmode_independent",
    "debug",
    "map_f64_to_f32",
    r"sm_[0-9]+" => ShaderModel,
} else {
    r"(?:[a-zA-Z][a-zA-Z0-9_$]*|[_$%][a-zA-Z0-9_$]+)<[0-9]+>" => ParametrizedID,
}
else {
    _
}

pub Module: () = {
    Version
    Target
    Directive*
};

Version = {
    ".version" VersionNumber
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#ptx-module-directives-target
Target = {
    ".target" Comma<TargetSpecifier>
};

TargetSpecifier = {
    ShaderModel,
    "texmode_unified",
    "texmode_independent",
    "debug",
    "map_f64_to_f32"
};

Directive : () = {
    AddressSize,
    Function
};

AddressSize = {
    ".address_size" "32", 
    ".address_size" "64"
};

Function: (bool, &'input str) = {
    LinkingDirective* <is:IsKernel> <id:ID> "(" Comma<FunctionInput> ")" FunctionBody => (is, id)
};

LinkingDirective = {
    ".extern",
    ".visible",
    ".weak"
};

IsKernel: bool = {
    ".entry" => true,
    ".func" => false
};

FunctionInput = {
    ".param" Type ID
};

FunctionBody = {
    "{" Statement* "}"
};

StateSpaceSpecifier = {
    ".reg",
    ".sreg",
    ".const",
    ".global",
    ".local",
    ".shared"
};

Type = {
    BaseType,
    ".pred",
    ".f16",
    ".f16x2", 
};

BaseType = {
    ".b8", ".b16", ".b32", ".b64",
    ".u8", ".u16", ".u32", ".u64",
    ".s8", ".s16", ".s32", ".s64",
    ".f32", ".f64"
};

Statement: () = {
    Label,
    DebugDirective,
    Variable ";",
    Instruction ";"
};

DebugDirective = {
    DebugLocation
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#debugging-directives-loc
DebugLocation = {
    ".loc" Num Num Num
};

Label = {
    ID ":"
};

Variable = {
    StateSpaceSpecifier Type VariableName
};

VariableName = {
    ID,
    ParametrizedID
};

Instruction = {
    InstLd
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#data-movement-and-conversion-instructions-ld
InstLd = {
    "ld" LdQualifier? LdStateSpace? LdCacheOperator? Vector? BaseType ID "," "[" ID "]"
};

LdQualifier = {
    ".weak",
    ".volatile",
    ".relaxed.scope",
    ".acquire.scope",
};

LdStateSpace = {
    ".const",
    ".global",
    ".local",
    ".param",
    ".shared",
};

LdCacheOperator = {
    ".ca",
    ".cg",
    ".cs",
    ".lu",
    ".cv",
};

Vector = {
    ".v2",
    ".v4"
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

VersionNumber = r"[0-9]+\.[0-9]+";
Num: u64 = <s:r"[0-9]+"> => u64::from_str(s).unwrap();
// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#identifiers
ID: &'input str = <s:r"[a-zA-Z][a-zA-Z0-9_$]*|[_$%][a-zA-Z0-9_$]+"> => s;