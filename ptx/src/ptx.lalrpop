use std::str::FromStr;
use crate::ast;
use std::convert::identity;

grammar;

match {
    r"\s+" => { },
    r"//[^\n\r]*[\n\r]*" => { },
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },
    r"sm_[0-9]+" => ShaderModel,
    r"-?[?:0x]?[0-9]+" => Num
} else {
    r"(?:[a-zA-Z][a-zA-Z0-9_$]*|[_$%][a-zA-Z0-9_$]+)<[0-9]+>" => ParametrizedID,
} else {
    _
}

pub Module: Option<ast::Module<'input>> = {
    <v:Version> Target <f:Directive*> => v.map(|v| ast::Module { version: v, functions: f.into_iter().filter_map(identity).collect::<Vec<_>>() })
};

Version: Option<(u8, u8)> = {
    ".version" <v:VersionNumber> => {
        let dot = v.find('.').unwrap();
        let major = v[..dot].parse::<u8>();
        major.ok().and_then(|major| {
            v[dot+1..].parse::<u8>().ok().map(|minor| {
                (major, minor)
            })
        })
    }
}

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#ptx-module-directives-target
Target = {
    ".target" Comma<TargetSpecifier>
};

TargetSpecifier = {
    ShaderModel,
    "texmode_unified",
    "texmode_independent",
    "debug",
    "map_f64_to_f32"
};

Directive: Option<ast::Function<'input>> = {
    AddressSize => None,
    <f:Function> => Some(f),
    File => None,
    Section => None
};

AddressSize = {
    ".address_size" Num
};

Function: ast::Function<'input> = {
    LinkingDirective* <kernel:IsKernel> <name:ID> "(" <args:Comma<FunctionInput>> ")" <body:FunctionBody> => ast::Function {<>}
};

LinkingDirective = {
    ".extern",
    ".visible",
    ".weak"
};

IsKernel: bool = {
    ".entry" => true,
    ".func" => false
};

FunctionInput: ast::Argument = {
    ".param" Type ID => ast::Argument {}
};

FunctionBody: Vec<ast::Statement<'input>> = {
    "{" <s:Statement*> "}" => { s.into_iter().filter_map(identity).collect() }
};

StateSpaceSpecifier = {
    ".reg",
    ".sreg",
    ".const",
    ".global",
    ".local",
    ".shared"
};

Type = {
    BaseType,
    ".pred",
    ".f16",
    ".f16x2", 
};

BaseType = {
    ".b8", ".b16", ".b32", ".b64",
    ".u8", ".u16", ".u32", ".u64",
    ".s8", ".s16", ".s32", ".s64",
    ".f32", ".f64"
};

Statement: Option<ast::Statement<'input>> = {
    <l:Label> => Some(ast::Statement::Label(l)),
    DebugDirective => None,
    <v:Variable> ";" => Some(ast::Statement::Variable(v)),
    <i:Instruction> ";" => Some(ast::Statement::Instruction(i))
};

DebugDirective: () = {
    DebugLocation
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#debugging-directives-loc
DebugLocation = {
    ".loc" Num Num Num
};

Label: &'input str = {
    <id:ID> ":" => id
};

Variable: ast::Variable = {
    StateSpaceSpecifier Type VariableName => ast::Variable {}
};

VariableName = {
    ID,
    ParametrizedID
};

Instruction = {
    InstLd,
    InstMov,
    InstMul,
    InstAdd,
    InstSetp,
    InstNot,
    InstBra,
    InstCvt,
    InstShl,
    InstSt,
    InstRet,
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#data-movement-and-conversion-instructions-ld
InstLd: ast::Instruction = {
    "ld" LdQualifier? LdStateSpace? LdCacheOperator? Vector? BaseType ID "," "[" ID "]" => ast::Instruction::Ld
};

LdQualifier: () = {
    ".weak",
    ".volatile",
    ".relaxed" LdScope,
    ".acquire" LdScope,
};

LdScope = {
    ".cta", ".gpu", ".sys"
};

LdStateSpace = {
    ".const",
    ".global",
    ".local",
    ".param",
    ".shared",
};

LdCacheOperator = {
    ".ca",
    ".cg",
    ".cs",
    ".lu",
    ".cv",
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#data-movement-and-conversion-instructions-mov
InstMov: ast::Instruction = {
    "mov" MovType ID "," Operand => ast::Instruction::Mov
};

MovType = {
    ".b16", ".b32", ".b64",
    ".u16", ".u32", ".u64",
    ".s16", ".s32", ".s64",
    ".f32", ".f64",
    ".pred"
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#integer-arithmetic-instructions-mul
// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#floating-point-instructions-mul
// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#half-precision-floating-point-instructions-mul
InstMul: ast::Instruction = {
    "mul" MulIntControl? IntType ID "," Operand "," Operand  => ast::Instruction::Mul,
    "mul" RoundingMode? ".ftz"? ".sat"? ".f32" ID "," Operand "," Operand => ast::Instruction::Mul,
    "mul" RoundingMode? ".f64" ID "," Operand "," Operand => ast::Instruction::Mul,
    "mul" ".rn"? ".ftz"? ".sat"? ".f16" ID "," Operand "," Operand => ast::Instruction::Mul,
    "mul" ".rn"? ".ftz"? ".sat"? ".f16x2" ID "," Operand "," Operand => ast::Instruction::Mul,
};

MulIntControl = {
    "hi", ".lo", ".wide"
};

#[inline]
RoundingMode = {
    ".rn", ".rz", ".rm", ".rp"
};

IntType = {
    ".u16", ".u32", ".u64",
    ".s16", ".s32", ".s64",
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#integer-arithmetic-instructions-add
// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#floating-point-instructions-add
// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#half-precision-floating-point-instructions-add
InstAdd: ast::Instruction = {
    "add" IntType ID "," Operand "," Operand => ast::Instruction::Add,
    "add" ".sat" ".s32" ID "," Operand "," Operand => ast::Instruction::Add,
    "add" RoundingMode? ".ftz"? ".sat"? ".f32" ID "," Operand "," Operand => ast::Instruction::Add,
    "add" RoundingMode? ".f64" ID "," Operand "," Operand => ast::Instruction::Add,
    "add" ".rn"? ".ftz"? ".sat"? ".f16" ID "," Operand "," Operand => ast::Instruction::Add,
    "add" ".rn"? ".ftz"? ".sat"? ".f16x2" ID "," Operand "," Operand => ast::Instruction::Add,
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#comparison-and-selection-instructions-setp
InstSetp: ast::Instruction = {
    "setp" SetpCmpOp ".ftz"? SetpType ID ("|" ID)? "," Operand "," Operand => ast::Instruction::Setp,
    "setp" SetpCmpOp SetpBoolOp ".ftz"? SetpType ID ("|" ID)? "," Operand "," Operand "," "!"? ID => ast::Instruction::Setp
};

SetpCmpOp = {
    ".eq", ".ne", ".lt", ".le", ".gt", ".ge", ".lo", ".ls", ".hi", ".hs",
    ".equ", ".neu", ".ltu", ".leu", ".gtu", ".geu", ".num", ".nan"
};

SetpBoolOp = {
    ".and", ".or", ".xor"
};

SetpType = {
    ".b16", ".b32", ".b64",
    ".u16", ".u32", ".u64",
    ".s16", ".s32", ".s64",
    ".f32", ".f64"
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#logic-and-shift-instructions-not
InstNot: ast::Instruction = {
    "not" NotType ID "," Operand => ast::Instruction::Not
};

NotType = {
    ".pred", ".b16", ".b32", ".b64"
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#control-flow-instructions-at
InstAt: ast::Instruction = {
    "@" "!"? ID => ast::Instruction::At
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#control-flow-instructions-bra
InstBra: ast::Instruction = {
    InstAt? "bra" ".uni"? ID => ast::Instruction::Bra
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#data-movement-and-conversion-instructions-cvt
InstCvt: ast::Instruction = {
    "cvt" CvtRnd? ".ftz"? ".sat"? CvtType CvtType ID "," Operand => ast::Instruction::Cvt
};

CvtRnd = {
    CvtIrnd,
    CvtFrnd
}

CvtIrnd = {
    ".rni", ".rzi", ".rmi", ".rpi"
};

CvtFrnd = {
    ".rn",  ".rz",  ".rm", ".rp"
};

CvtType = {
    ".u8", ".u16", ".u32", ".u64",
    ".s8", ".s16", ".s32", ".s64",
    ".f16", ".f32", ".f64"
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#logic-and-shift-instructions-shl
InstShl: ast::Instruction = {
    "shl" ShlType ID "," Operand "," Operand => ast::Instruction::Shl
};

ShlType = {
    ".b16", ".b32", ".b64"
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#data-movement-and-conversion-instructions-st
InstSt: ast::Instruction = {
    "st" LdQualifier? StStateSpace? StCacheOperator? Vector? BaseType "[" ID "]" "," Operand => ast::Instruction::Shl
};

StStateSpace = {
    ".global",
    ".local",
    ".param",
    ".shared",
};

StCacheOperator = {
    ".wb",
    ".cg",
    ".cs",
    ".wt",
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#control-flow-instructions-ret
InstRet: ast::Instruction = {
    "ret" ".uni"? => ast::Instruction::Ret
};

Operand: () = {
    ID,
    Num,
    OffsetOperand,
    ArrayOperand,
    VectorOperand,
};

OffsetOperand = {
    ID "+" Num,
};

ArrayOperand = {
    ID "[" Num "]",
};

VectorOperand: () = {
    ID "." ID,
    ID DotID,
};

Vector = {
    ".v2",
    ".v4"
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#debugging-directives-file
File = {
    ".file" Num String ("," Num "," Num)?
};

// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#debugging-directives-section
Section = {
    ".section" DotID "{" SectionDwarfLines* "}"
};

SectionDwarfLines: () = {
    BitType Comma<Num>,
    ".b32" SectionLabel,
    ".b64" SectionLabel,
    ".b32" SectionLabel "+" Num,
    ".b64" SectionLabel "+" Num,
};

SectionLabel = {
    ID,
    DotID
};

BitType = {
    ".b8", ".b16", ".b32", ".b64"
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

String = r#""[^"]*""#;
VersionNumber = r"[0-9]+\.[0-9]+";
// https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#identifiers
ID: &'input str = <s:r"[a-zA-Z][a-zA-Z0-9_$]*|[_$%][a-zA-Z0-9_$]+"> => s;
DotID: &'input str = <s:r"\.[a-zA-Z][a-zA-Z0-9_$]*"> => s;